1、	define.h
	用constexpr、enum、inline 代替	#define

2、	MyConst.h
	A.在能使用const的地方都尽量使用const(函数)
	B.位于函数末尾的const可以发生函数重载 ，如class TextBlock	中	operator[]
		普通对象调用普通函数，const对象调用const输入的函数
	C.若某一函数要求输入const类型的变量	，如print(const TextBlock& tb)
		但调用时变量并非const，则会自动调用有const的，如 operator[] 
	D.mutable可以使private成员变量在const下变为可变，但是应当少用mutable
	E.const_cast<>可以将const和non-const互相转换，但应该避免使用

3、	initialize.h
	在一个类的成员函数中调用另一个类的对象时，可使用
	static Filesystem& tfs()	函数使用格式，以引用的方式返回一个类对象
	该函数也可以放在类中！！！！！！！！！！！一定使用static
	可避免跨编译单元的初始化顺序问题	并且全局只能有一个该对象

4、construct.h
	A.应该自己写好	构造函数、析构函数、拷贝构造、拷贝赋值运算符
	B.不希望编译器自己使用某些函数，而是希望只由自己调用（拷贝构造函数，赋值运算符等），
		a.在c++11以前，将此函数放在private中，并private继承类的方法:
			class Base
			{
			public:
				Base();
				virtual ~Base();
			private:
				Base(const Base&);
				Base& operator=(const Base&);
			};
			class Derived : public Base {};

		b.c++11以后，使用  = delete

5、destrerror.h
	如果在析构函数里出现异常从而不容易处理，可以设置一个用户自主调用的close函数，在用户调用时
	就关闭，而在析构时根据读取用户调用时的状态值判断是否关闭成功
	关闭的责任就从析构函数转到用户自己调用的close函数中，析构函数成为一种备用方案

6、不要在构造和析构函数中调用虚函数。在子类构造时，子类对象还未完全创建，虚函数调用的仍然是父类的函数，

7、copyoperator.h
	A.拷贝赋值运算符返回类型必须是引用
	B.实现拷贝赋值运算时对指针的操作(细节见.h文件)，存在指针时，最好使用swap函数+传入右值	
	C.拷贝构造和拷贝赋值运算在拷贝时，一定要完整的拷贝父类的成员变量---class newcopy

8、NewedPtr.h
	当函数需要传入指针时，尽量将传入的指针单独写成一句话，并使用智能指针
		eg.	std::shared_ptr<NewedPtr> pNewedPtr(new NewedPtr);
			processWidget(pNewedPtr, GetPriority());
	如果在某处抛出，异常智能指针可以即使回收内存不会内存泄漏

9、MyInterface.h
	自己设计的类要写好调用接口，做好用户调用时使用错误的应对情况。
	如	class MyInt_Date	中分别需要一个	month、day、year	进行构造，
	为了防止将 month和day写反，在	class MyInt_Month	中，将数字信息（m_month）
	改为static静态函数，减少使用错误。

10、nonMemFri.h
	A.封装性：能访问到private的函数越少，封装性越好
	B.当一个函数需要调用类内的一些函数时 如	clearAll ，应当设置其为	非成员非友元函数
	C.可以将其放在一个命名空间下，在不同文件内都有	namespace	mytype{}	时
		所有mytype会编译在一起，需要避免重复

11、myswap.h
	A.自定义swap函数：
		1.现在类内定义一个public的swap方法
		2.	类外定义swap方法调用该类的public的swap方法
			使用namespace特化std标准库内的swap模板(必须全特化)
		调用：
				swap(a, b);			//调用	void swap(myswap& lhs, myswap& rhs)
				std::swap(a, b);	//调用std内的swap模板特化
	B.使用swap函数简化拷贝构造和拷贝赋值
	C.使用类模板进行自定义swap函数，进行特化时必须要全特化，不能偏特化

12、以拷贝构造的构造对象要比先构造再赋值运行效率高
	eg.
		string password = "123456";
		string secret_pwd1(password);	
		//优于
		string secret_pwd2;
		secret_pwd2=password;

13、inline
	A.	inline修饰变量后，如	inline static int x = 10;
		inline存在后，变量的定义和声明可以在一起，变量可以被分配内存
	B.	存在同名函数，编译器会自动调用inline函数	
		namespace libfoo{}	和	void inlinenamespace_test(void)
	C.	如果一个函数是inline的，但是通过指针调用可能不是inline的

14、
	A.	pimpl设计模式是为了进一步隐藏掉某个类里私有的成员变量和成员方法
		转而用一个新的class代替，将要隐藏的私有的成员变量和成员方法放在该类中
	B.	当需要一个声明在多个文件中使用的时候，可以将declaration和definition放在一个头文件内(xxxfwd.h)
		需要的时候直接 include即可

15、Nameinher.h
	public继承下：
		当子类与基类有相同的函数名时，且通过子类对象调用父类函数------------非重写函数
		使用using base_name::base_func 即可使用子类对象调用父类函数
		如果不使用，则无法调用，除非重写继承的函数
	private继承下：
		如果需要通过子类调用父类的同名函数时，只能在子类的同名函数中
		virtual void base_func() { base_name::base_func(); }

16、InterandImpleinher.h
	A.	接口继承：通过纯虚函数定义接口，子类必须实现这些接口。
		实现继承：子类继承父类的具体实现，可以直接使用或选择重载父类的成员函数。
	B.	当子类继承自父类class Airplane时，如果忘记实现fly，将无法创建实例对象。
		所以将父类改为newAirplane

17、repvirfunc.h	虚函数替代方案
	A.使用	non-virtual interface (NVI)	设计手法
	B.使用函数指针；在父类中使用指针，存储子类需要调用的non-virutal func；
		子类在构造时传入想调用的函数句柄，此函数需要自己设计（如CallHealthQuick）
	C.